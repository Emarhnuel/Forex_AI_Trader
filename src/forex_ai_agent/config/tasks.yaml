chart_analysis_task:
  description: >
    Analyze the trading chart video at {video_path} to extract comprehensive technical information.
    Focus analysis on {analysis_focus} with current timestamp {current_timestamp}.
    Process the video frame-by-frame to identify:
    1. Trading pair (e.g., BTC/USD, EUR/USD, GBP/JPY)
    2. Timeframe being displayed (1m, 5m, 15m, 1h, 4h, 1d)
    3. Technical indicators visible (RSI, MACD, Moving Averages, Bollinger Bands, etc.)
    4. Chart patterns (triangles, head and shoulders, flags, pennants, etc.)
    5. Support and resistance levels
    6. Trend direction and strength
    7. Key price levels and zones
    8. Volume analysis if visible
    
    Use your multimodal vision capabilities to thoroughly examine each frame
    and provide detailed technical analysis with high accuracy.
  expected_output: >
    A structured JSON object containing:
    - trading_pair: string (e.g., "BTC/USD")
    - timeframe: string (e.g., "1h")
    - technical_indicators: array of strings
    - chart_patterns: array of objects with pattern type and confidence
    - support_levels: array of price levels
    - resistance_levels: array of price levels
    - trend_direction: string ("bullish", "bearish", "sideways")
    - trend_strength: string ("strong", "moderate", "weak")
    - key_observations: array of important notes
    - confidence_score: float (0.0 to 1.0)
  agent: chart_analyst
  async_execution: false
  guardrail: "Ensure trading pair is clearly identified, confidence score is between 0.0-1.0, and at least 3 technical indicators are detected"
  markdown: false

market_data_task:
  description: >
    For trading pair {trading_pair} identified from chart analysis,
    gather comprehensive real-time market data using {data_sources} priority.
    Current analysis timestamp: {current_timestamp}
    
    Collect the following data points:
    1. Current price and recent price action
    2. 24-hour volume and volume trends
    3. Order book data (bid/ask spread, depth)
    4. Recent price changes (1h, 24h, 7d)
    5. Market sentiment indicators
    6. Volatility metrics
    7. Liquidity analysis
    
    Ensure data is current (within last 5 minutes) and from reliable sources.
    Cross-reference multiple data sources for accuracy and consistency.
  expected_output: >
    A structured JSON object containing:
    - symbol: string
    - current_price: float
    - volume_24h: float
    - price_change_24h: float
    - price_change_percentage_24h: float
    - bid_price: float
    - ask_price: float
    - spread: float
    - market_cap: float (if applicable)
    - volatility_24h: float
    - timestamp: ISO datetime string
    - data_sources: array of source names
    - market_status: string ("open", "closed", "pre_market", "after_hours")
  context: [chart_analysis_task]  
  agent: financial_data_agent
  async_execution: true
  guardrail: "Verify all price data is current within last 5 minutes, includes valid timestamp, and data sources are identified"
  markdown: false

strategy_formulation_task:
  description: >
    Using chart analysis results from {trading_pair} and current market data at {current_timestamp},
    formulate a comprehensive trading strategy with {risk_level} risk tolerance.
    
    Chart analysis context: {chart_analysis}
    Market data context: {market_data}
    
    Create a strategy that includes:
    1. Trade direction (long/short) with clear rationale
    2. Specific entry price levels with reasoning
    3. Stop-loss placement based on technical levels
    4. Take-profit targets (multiple levels if appropriate)
    5. Position sizing recommendations
    6. Risk-reward ratio calculation
    7. Market condition assessment
    8. Alternative scenarios and contingency plans
    9. Time horizon for the trade
    10. Key levels to monitor
    
    Consider current market conditions, volatility, and risk management principles.
    Provide clear, actionable recommendations suitable for the identified trading pair and timeframe.
  expected_output: >
    A comprehensive trading strategy document containing:
    - trade_direction: string ("long", "short", "neutral")
    - entry_points: array of price levels with rationale
    - stop_loss: float with reasoning
    - take_profit_levels: array of price targets
    - position_size_recommendation: string with percentage or amount
    - risk_reward_ratio: float
    - confidence_level: float (0.0 to 1.0)
    - time_horizon: string ("scalp", "intraday", "swing", "position")
    - key_levels_to_watch: array of important price levels
    - market_conditions_assessment: string
    - alternative_scenarios: array of contingency plans
    - reasoning: detailed explanation of strategy logic
    - warnings: array of potential risks or concerns
  context: [chart_analysis_task, market_data_task]  
  agent: strategy_agent
  async_execution: false
  guardrail: "Confirm strategy includes entry points, stop loss, take profit, risk-reward ratio above 1:1, and confidence level between 0.0-1.0"
  markdown: true
  output_file: 'outputs/trading_strategy.md'
  create_directory: true